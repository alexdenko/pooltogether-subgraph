enum DrawState {
  Open
  Committed
  Rewarded
}

type Draw @entity {
  id: ID!
  drawId: BigInt!
  feeBeneficiary: Bytes
  secretHash: Bytes
  feeFraction: BigInt
  winner: Bytes
  entropy: Bytes
  winnings: BigInt
  fee: BigInt
  state: DrawState
  poolContract: PoolContract!

  openedAt: BigInt!
  committedAt: BigInt!
  rewardedAt: BigInt!

  openedAtBlock: BigInt!
  committedAtBlock: BigInt!
  rewardedAtBlock: BigInt!

  balance: BigInt

  version: BigInt!
}

type Player @entity {
  id: ID! 
  address: Bytes!
  poolContract: PoolContract!
  consolidatedBalance: BigInt!
  firstDepositDrawId: BigInt!
  latestBalance: BigInt!
  latestDrawId: BigInt!
  winnings: BigInt!

  version: BigInt!
}

type Pod @entity {
  id: ID!
  address: Bytes!
  podPlayers: [PodPlayer!]! @derivedFrom(field: "pod")
  podPlayersCount: BigInt

  currentExchangeRateMantissa: BigInt!
  balanceUnderlying: BigInt!
  totalPendingDeposits: BigInt!
  poolContract: PoolContract!

  winnings: BigInt!

  version: BigInt!
}

type PodPlayer @entity {
  id: ID! 
  address: Bytes!
  pod: Pod!

  balance: BigInt!
  balanceUnderlying: BigInt!
  pendingDeposit: BigInt!

  winnings: BigInt!

  version: BigInt!
}

type Sponsor @entity {
  id: ID! 
  address: Bytes!
  poolContract: PoolContract!
  sponsorshipAndFeeBalance: BigInt!
}

type Admin @entity {
  id: ID!
  address: Bytes!
  addedAt: BigInt!
  poolContract: PoolContract!
}

type PoolContract @entity {
  id: ID!
  draws: [Draw!]! @derivedFrom(field: "poolContract")
  admins: [Admin!]! @derivedFrom(field: "poolContract")
  players: [Player!]! @derivedFrom(field: "poolContract")
  playersCount: BigInt
  drawsCount: BigInt
  openDrawId: BigInt!
  committedDrawId: BigInt!
  paused: Boolean
  poolToken: PoolTokenContract

  openBalance: BigInt!
  committedBalance: BigInt!
  sponsorshipAndFeeBalance: BigInt!
  winnings: BigInt!

  version: BigInt!
}

type PoolTokenContract @entity {
  id: ID!
  name: String!
  symbol: String!
  poolContract: PoolContract! @derivedFrom(field: "poolToken")
}